{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseRole = _interopRequireDefault(require(\"./ParseRole\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n\nvar PUBLIC_KEY = '*';\n/**\r\n * Creates a new ACL.\r\n * If no argument is given, the ACL has no permissions for anyone.\r\n * If the argument is a Parse.User, the ACL will have read and write\r\n *   permission for only that user.\r\n * If the argument is any other JSON object, that object will be interpretted\r\n *   as a serialized ACL created with toJSON().\r\n *\r\n * <p>An ACL, or Access Control List can be added to any\r\n * <code>Parse.Object</code> to restrict access to only a subset of users\r\n * of your application.</p>\r\n *\r\n * @alias Parse.ACL\r\n */\n\nvar ParseACL = /*#__PURE__*/function () {\n  /**\r\n   * @param {(Parse.User | object)} arg1 The user to initialize the ACL for\r\n   */\n  function ParseACL(arg1\n  /*: ParseUser | ByIdMap*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseACL);\n    (0, _defineProperty2.default)(this, \"permissionsById\", void 0);\n    this.permissionsById = {};\n\n    if (arg1 && (0, _typeof2.default)(arg1) === 'object') {\n      if (arg1 instanceof _ParseUser.default) {\n        this.setReadAccess(arg1, true);\n        this.setWriteAccess(arg1, true);\n      } else {\n        for (var _userId in arg1) {\n          var accessList = arg1[_userId];\n          this.permissionsById[_userId] = {};\n\n          for (var _permission in accessList) {\n            var allowed = accessList[_permission];\n\n            if (_permission !== 'read' && _permission !== 'write') {\n              throw new TypeError('Tried to create an ACL with an invalid permission type.');\n            }\n\n            if (typeof allowed !== 'boolean') {\n              throw new TypeError('Tried to create an ACL with an invalid permission value.');\n            }\n\n            this.permissionsById[_userId][_permission] = allowed;\n          }\n        }\n      }\n    } else if (typeof arg1 === 'function') {\n      throw new TypeError('ParseACL constructed with a function. Did you forget ()?');\n    }\n  }\n  /**\r\n   * Returns a JSON-encoded version of the ACL.\r\n   *\r\n   * @returns {object}\r\n   */\n\n\n  (0, _createClass2.default)(ParseACL, [{\n    key: \"toJSON\",\n    value: function ()\n    /*: ByIdMap*/\n    {\n      var permissions = {};\n\n      for (var p in this.permissionsById) {\n        permissions[p] = this.permissionsById[p];\n      }\n\n      return permissions;\n    }\n    /**\r\n     * Returns whether this ACL is equal to another object\r\n     *\r\n     * @param {ParseACL} other The other object's ACL to compare to\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: ParseACL*/\n    )\n    /*: boolean*/\n    {\n      if (!(other instanceof ParseACL)) {\n        return false;\n      }\n\n      var users = (0, _keys.default)(this.permissionsById);\n      var otherUsers = (0, _keys.default)(other.permissionsById);\n\n      if (users.length !== otherUsers.length) {\n        return false;\n      }\n\n      for (var u in this.permissionsById) {\n        if (!other.permissionsById[u]) {\n          return false;\n        }\n\n        if (this.permissionsById[u].read !== other.permissionsById[u].read) {\n          return false;\n        }\n\n        if (this.permissionsById[u].write !== other.permissionsById[u].write) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_setAccess\",\n    value: function (accessType\n    /*: string*/\n    , userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (userId instanceof _ParseUser.default) {\n        userId = userId.id;\n      } else if (userId instanceof _ParseRole.default) {\n        var name = userId.getName();\n\n        if (!name) {\n          throw new TypeError('Role must have a name');\n        }\n\n        userId = 'role:' + name;\n      }\n\n      if (typeof userId !== 'string') {\n        throw new TypeError('userId must be a string.');\n      }\n\n      if (typeof allowed !== 'boolean') {\n        throw new TypeError('allowed must be either true or false.');\n      }\n\n      var permissions = this.permissionsById[userId];\n\n      if (!permissions) {\n        if (!allowed) {\n          // The user already doesn't have this permission, so no action is needed\n          return;\n        } else {\n          permissions = {};\n          this.permissionsById[userId] = permissions;\n        }\n      }\n\n      if (allowed) {\n        this.permissionsById[userId][accessType] = true;\n      } else {\n        delete permissions[accessType];\n\n        if ((0, _keys.default)(permissions).length === 0) {\n          delete this.permissionsById[userId];\n        }\n      }\n    }\n  }, {\n    key: \"_getAccess\",\n    value: function (accessType\n    /*: string*/\n    , userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (userId instanceof _ParseUser.default) {\n        userId = userId.id;\n\n        if (!userId) {\n          throw new Error('Cannot get access for a ParseUser without an ID');\n        }\n      } else if (userId instanceof _ParseRole.default) {\n        var name = userId.getName();\n\n        if (!name) {\n          throw new TypeError('Role must have a name');\n        }\n\n        userId = 'role:' + name;\n      }\n\n      var permissions = this.permissionsById[userId];\n\n      if (!permissions) {\n        return false;\n      }\n\n      return !!permissions[accessType];\n    }\n    /**\r\n     * Sets whether the given user is allowed to read this object.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId.\r\n     * @param {boolean} allowed Whether that user should have read access.\r\n     */\n\n  }, {\n    key: \"setReadAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      this._setAccess('read', userId, allowed);\n    }\n    /**\r\n     * Get whether the given user id is *explicitly* allowed to read this object.\r\n     * Even if this returns false, the user may still be able to access it if\r\n     * getPublicReadAccess returns true or a role that the user belongs to has\r\n     * write access.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"getReadAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      return this._getAccess('read', userId);\n    }\n    /**\r\n     * Sets whether the given user id is allowed to write this object.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role..\r\n     * @param {boolean} allowed Whether that user should have write access.\r\n     */\n\n  }, {\n    key: \"setWriteAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      this._setAccess('write', userId, allowed);\n    }\n    /**\r\n     * Gets whether the given user id is *explicitly* allowed to write this object.\r\n     * Even if this returns false, the user may still be able to write it if\r\n     * getPublicWriteAccess returns true or a role that the user belongs to has\r\n     * write access.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"getWriteAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      return this._getAccess('write', userId);\n    }\n    /**\r\n     * Sets whether the public is allowed to read this object.\r\n     *\r\n     * @param {boolean} allowed\r\n     */\n\n  }, {\n    key: \"setPublicReadAccess\",\n    value: function (allowed\n    /*: boolean*/\n    ) {\n      this.setReadAccess(PUBLIC_KEY, allowed);\n    }\n    /**\r\n     * Gets whether the public is allowed to read this object.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"getPublicReadAccess\",\n    value: function ()\n    /*: boolean*/\n    {\n      return this.getReadAccess(PUBLIC_KEY);\n    }\n    /**\r\n     * Sets whether the public is allowed to write this object.\r\n     *\r\n     * @param {boolean} allowed\r\n     */\n\n  }, {\n    key: \"setPublicWriteAccess\",\n    value: function (allowed\n    /*: boolean*/\n    ) {\n      this.setWriteAccess(PUBLIC_KEY, allowed);\n    }\n    /**\r\n     * Gets whether the public is allowed to write this object.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"getPublicWriteAccess\",\n    value: function ()\n    /*: boolean*/\n    {\n      return this.getWriteAccess(PUBLIC_KEY);\n    }\n    /**\r\n     * Gets whether users belonging to the given role are allowed\r\n     * to read this object. Even if this returns false, the role may\r\n     * still be able to write it if a parent role has read access.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @returns {boolean} true if the role has read access. false otherwise.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\n\n  }, {\n    key: \"getRoleReadAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      return this.getReadAccess('role:' + role);\n    }\n    /**\r\n     * Gets whether users belonging to the given role are allowed\r\n     * to write this object. Even if this returns false, the role may\r\n     * still be able to write it if a parent role has write access.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @returns {boolean} true if the role has write access. false otherwise.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\n\n  }, {\n    key: \"getRoleWriteAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      return this.getWriteAccess('role:' + role);\n    }\n    /**\r\n     * Sets whether users belonging to the given role are allowed\r\n     * to read this object.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @param {boolean} allowed Whether the given role can read this object.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\n\n  }, {\n    key: \"setRoleReadAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      this.setReadAccess('role:' + role, allowed);\n    }\n    /**\r\n     * Sets whether users belonging to the given role are allowed\r\n     * to write this object.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @param {boolean} allowed Whether the given role can write this object.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\n\n  }, {\n    key: \"setRoleWriteAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      this.setWriteAccess('role:' + role, allowed);\n    }\n  }]);\n  return ParseACL;\n}();\n\nvar _default = ParseACL;\nexports.default = _default;","map":{"version":3,"sources":["D:/8 Github/baler/node_modules/moralis/lib/browser/ParseACL.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_keys","_typeof2","_classCallCheck2","_createClass2","_defineProperty2","_ParseRole","_ParseUser","PUBLIC_KEY","ParseACL","arg1","permissionsById","setReadAccess","setWriteAccess","_userId","accessList","_permission","allowed","TypeError","key","permissions","p","other","users","otherUsers","length","u","read","write","accessType","userId","id","name","getName","Error","_setAccess","_getAccess","getReadAccess","getWriteAccess","role","_default"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n\r\nvar _ParseRole = _interopRequireDefault(require(\"./ParseRole\"));\r\n\r\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n\r\nvar PUBLIC_KEY = '*';\r\n/**\r\n * Creates a new ACL.\r\n * If no argument is given, the ACL has no permissions for anyone.\r\n * If the argument is a Parse.User, the ACL will have read and write\r\n *   permission for only that user.\r\n * If the argument is any other JSON object, that object will be interpretted\r\n *   as a serialized ACL created with toJSON().\r\n *\r\n * <p>An ACL, or Access Control List can be added to any\r\n * <code>Parse.Object</code> to restrict access to only a subset of users\r\n * of your application.</p>\r\n *\r\n * @alias Parse.ACL\r\n */\r\n\r\nvar ParseACL = /*#__PURE__*/function () {\r\n  /**\r\n   * @param {(Parse.User | object)} arg1 The user to initialize the ACL for\r\n   */\r\n  function ParseACL(arg1\r\n  /*: ParseUser | ByIdMap*/\r\n  ) {\r\n    (0, _classCallCheck2.default)(this, ParseACL);\r\n    (0, _defineProperty2.default)(this, \"permissionsById\", void 0);\r\n    this.permissionsById = {};\r\n\r\n    if (arg1 && (0, _typeof2.default)(arg1) === 'object') {\r\n      if (arg1 instanceof _ParseUser.default) {\r\n        this.setReadAccess(arg1, true);\r\n        this.setWriteAccess(arg1, true);\r\n      } else {\r\n        for (var _userId in arg1) {\r\n          var accessList = arg1[_userId];\r\n          this.permissionsById[_userId] = {};\r\n\r\n          for (var _permission in accessList) {\r\n            var allowed = accessList[_permission];\r\n\r\n            if (_permission !== 'read' && _permission !== 'write') {\r\n              throw new TypeError('Tried to create an ACL with an invalid permission type.');\r\n            }\r\n\r\n            if (typeof allowed !== 'boolean') {\r\n              throw new TypeError('Tried to create an ACL with an invalid permission value.');\r\n            }\r\n\r\n            this.permissionsById[_userId][_permission] = allowed;\r\n          }\r\n        }\r\n      }\r\n    } else if (typeof arg1 === 'function') {\r\n      throw new TypeError('ParseACL constructed with a function. Did you forget ()?');\r\n    }\r\n  }\r\n  /**\r\n   * Returns a JSON-encoded version of the ACL.\r\n   *\r\n   * @returns {object}\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseACL, [{\r\n    key: \"toJSON\",\r\n    value: function ()\r\n    /*: ByIdMap*/\r\n    {\r\n      var permissions = {};\r\n\r\n      for (var p in this.permissionsById) {\r\n        permissions[p] = this.permissionsById[p];\r\n      }\r\n\r\n      return permissions;\r\n    }\r\n    /**\r\n     * Returns whether this ACL is equal to another object\r\n     *\r\n     * @param {ParseACL} other The other object's ACL to compare to\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"equals\",\r\n    value: function (other\r\n    /*: ParseACL*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      if (!(other instanceof ParseACL)) {\r\n        return false;\r\n      }\r\n\r\n      var users = (0, _keys.default)(this.permissionsById);\r\n      var otherUsers = (0, _keys.default)(other.permissionsById);\r\n\r\n      if (users.length !== otherUsers.length) {\r\n        return false;\r\n      }\r\n\r\n      for (var u in this.permissionsById) {\r\n        if (!other.permissionsById[u]) {\r\n          return false;\r\n        }\r\n\r\n        if (this.permissionsById[u].read !== other.permissionsById[u].read) {\r\n          return false;\r\n        }\r\n\r\n        if (this.permissionsById[u].write !== other.permissionsById[u].write) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }, {\r\n    key: \"_setAccess\",\r\n    value: function (accessType\r\n    /*: string*/\r\n    , userId\r\n    /*: ParseUser | ParseRole | string*/\r\n    , allowed\r\n    /*: boolean*/\r\n    ) {\r\n      if (userId instanceof _ParseUser.default) {\r\n        userId = userId.id;\r\n      } else if (userId instanceof _ParseRole.default) {\r\n        var name = userId.getName();\r\n\r\n        if (!name) {\r\n          throw new TypeError('Role must have a name');\r\n        }\r\n\r\n        userId = 'role:' + name;\r\n      }\r\n\r\n      if (typeof userId !== 'string') {\r\n        throw new TypeError('userId must be a string.');\r\n      }\r\n\r\n      if (typeof allowed !== 'boolean') {\r\n        throw new TypeError('allowed must be either true or false.');\r\n      }\r\n\r\n      var permissions = this.permissionsById[userId];\r\n\r\n      if (!permissions) {\r\n        if (!allowed) {\r\n          // The user already doesn't have this permission, so no action is needed\r\n          return;\r\n        } else {\r\n          permissions = {};\r\n          this.permissionsById[userId] = permissions;\r\n        }\r\n      }\r\n\r\n      if (allowed) {\r\n        this.permissionsById[userId][accessType] = true;\r\n      } else {\r\n        delete permissions[accessType];\r\n\r\n        if ((0, _keys.default)(permissions).length === 0) {\r\n          delete this.permissionsById[userId];\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_getAccess\",\r\n    value: function (accessType\r\n    /*: string*/\r\n    , userId\r\n    /*: ParseUser | ParseRole | string*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      if (userId instanceof _ParseUser.default) {\r\n        userId = userId.id;\r\n\r\n        if (!userId) {\r\n          throw new Error('Cannot get access for a ParseUser without an ID');\r\n        }\r\n      } else if (userId instanceof _ParseRole.default) {\r\n        var name = userId.getName();\r\n\r\n        if (!name) {\r\n          throw new TypeError('Role must have a name');\r\n        }\r\n\r\n        userId = 'role:' + name;\r\n      }\r\n\r\n      var permissions = this.permissionsById[userId];\r\n\r\n      if (!permissions) {\r\n        return false;\r\n      }\r\n\r\n      return !!permissions[accessType];\r\n    }\r\n    /**\r\n     * Sets whether the given user is allowed to read this object.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId.\r\n     * @param {boolean} allowed Whether that user should have read access.\r\n     */\r\n\r\n  }, {\r\n    key: \"setReadAccess\",\r\n    value: function (userId\r\n    /*: ParseUser | ParseRole | string*/\r\n    , allowed\r\n    /*: boolean*/\r\n    ) {\r\n      this._setAccess('read', userId, allowed);\r\n    }\r\n    /**\r\n     * Get whether the given user id is *explicitly* allowed to read this object.\r\n     * Even if this returns false, the user may still be able to access it if\r\n     * getPublicReadAccess returns true or a role that the user belongs to has\r\n     * write access.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"getReadAccess\",\r\n    value: function (userId\r\n    /*: ParseUser | ParseRole | string*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      return this._getAccess('read', userId);\r\n    }\r\n    /**\r\n     * Sets whether the given user id is allowed to write this object.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role..\r\n     * @param {boolean} allowed Whether that user should have write access.\r\n     */\r\n\r\n  }, {\r\n    key: \"setWriteAccess\",\r\n    value: function (userId\r\n    /*: ParseUser | ParseRole | string*/\r\n    , allowed\r\n    /*: boolean*/\r\n    ) {\r\n      this._setAccess('write', userId, allowed);\r\n    }\r\n    /**\r\n     * Gets whether the given user id is *explicitly* allowed to write this object.\r\n     * Even if this returns false, the user may still be able to write it if\r\n     * getPublicWriteAccess returns true or a role that the user belongs to has\r\n     * write access.\r\n     *\r\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"getWriteAccess\",\r\n    value: function (userId\r\n    /*: ParseUser | ParseRole | string*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      return this._getAccess('write', userId);\r\n    }\r\n    /**\r\n     * Sets whether the public is allowed to read this object.\r\n     *\r\n     * @param {boolean} allowed\r\n     */\r\n\r\n  }, {\r\n    key: \"setPublicReadAccess\",\r\n    value: function (allowed\r\n    /*: boolean*/\r\n    ) {\r\n      this.setReadAccess(PUBLIC_KEY, allowed);\r\n    }\r\n    /**\r\n     * Gets whether the public is allowed to read this object.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"getPublicReadAccess\",\r\n    value: function ()\r\n    /*: boolean*/\r\n    {\r\n      return this.getReadAccess(PUBLIC_KEY);\r\n    }\r\n    /**\r\n     * Sets whether the public is allowed to write this object.\r\n     *\r\n     * @param {boolean} allowed\r\n     */\r\n\r\n  }, {\r\n    key: \"setPublicWriteAccess\",\r\n    value: function (allowed\r\n    /*: boolean*/\r\n    ) {\r\n      this.setWriteAccess(PUBLIC_KEY, allowed);\r\n    }\r\n    /**\r\n     * Gets whether the public is allowed to write this object.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"getPublicWriteAccess\",\r\n    value: function ()\r\n    /*: boolean*/\r\n    {\r\n      return this.getWriteAccess(PUBLIC_KEY);\r\n    }\r\n    /**\r\n     * Gets whether users belonging to the given role are allowed\r\n     * to read this object. Even if this returns false, the role may\r\n     * still be able to write it if a parent role has read access.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @returns {boolean} true if the role has read access. false otherwise.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\r\n\r\n  }, {\r\n    key: \"getRoleReadAccess\",\r\n    value: function (role\r\n    /*: ParseRole | string*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      if (role instanceof _ParseRole.default) {\r\n        // Normalize to the String name\r\n        role = role.getName();\r\n      }\r\n\r\n      if (typeof role !== 'string') {\r\n        throw new TypeError('role must be a ParseRole or a String');\r\n      }\r\n\r\n      return this.getReadAccess('role:' + role);\r\n    }\r\n    /**\r\n     * Gets whether users belonging to the given role are allowed\r\n     * to write this object. Even if this returns false, the role may\r\n     * still be able to write it if a parent role has write access.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @returns {boolean} true if the role has write access. false otherwise.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\r\n\r\n  }, {\r\n    key: \"getRoleWriteAccess\",\r\n    value: function (role\r\n    /*: ParseRole | string*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      if (role instanceof _ParseRole.default) {\r\n        // Normalize to the String name\r\n        role = role.getName();\r\n      }\r\n\r\n      if (typeof role !== 'string') {\r\n        throw new TypeError('role must be a ParseRole or a String');\r\n      }\r\n\r\n      return this.getWriteAccess('role:' + role);\r\n    }\r\n    /**\r\n     * Sets whether users belonging to the given role are allowed\r\n     * to read this object.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @param {boolean} allowed Whether the given role can read this object.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\r\n\r\n  }, {\r\n    key: \"setRoleReadAccess\",\r\n    value: function (role\r\n    /*: ParseRole | string*/\r\n    , allowed\r\n    /*: boolean*/\r\n    ) {\r\n      if (role instanceof _ParseRole.default) {\r\n        // Normalize to the String name\r\n        role = role.getName();\r\n      }\r\n\r\n      if (typeof role !== 'string') {\r\n        throw new TypeError('role must be a ParseRole or a String');\r\n      }\r\n\r\n      this.setReadAccess('role:' + role, allowed);\r\n    }\r\n    /**\r\n     * Sets whether users belonging to the given role are allowed\r\n     * to write this object.\r\n     *\r\n     * @param role The name of the role, or a Parse.Role object.\r\n     * @param {boolean} allowed Whether the given role can write this object.\r\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\r\n     */\r\n\r\n  }, {\r\n    key: \"setRoleWriteAccess\",\r\n    value: function (role\r\n    /*: ParseRole | string*/\r\n    , allowed\r\n    /*: boolean*/\r\n    ) {\r\n      if (role instanceof _ParseRole.default) {\r\n        // Normalize to the String name\r\n        role = role.getName();\r\n      }\r\n\r\n      if (typeof role !== 'string') {\r\n        throw new TypeError('role must be a ParseRole or a String');\r\n      }\r\n\r\n      this.setWriteAccess('role:' + role, allowed);\r\n    }\r\n  }]);\r\n  return ParseACL;\r\n}();\r\n\r\nvar _default = ParseACL;\r\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}