{"ast":null,"code":"var _jsxFileName = \"/Users/CalvinCutlass/Desktop/Coding/coding_2020/Ivan Academy/Moralis/baler/src/components/characterSheet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Moralis = require('moralis');\n\nconst CharacterSheet = props => {\n  _s();\n\n  // const [object, setObject] = useState(null);\n  const [likes, setLikes] = useState(0);\n  let query = new Moralis.Query(\"UserImage\");\n  const imageData = useCallback(async () => {\n    const imgData = await getImage(); // const likes = await getImgLikeds(imgData);\n    // setLikes(likes);\n  }, []);\n  useEffect(() => {\n    if (props.nftSelected) {\n      imageData(); // setLikes(likes);\n    }\n  }, [imageData]);\n\n  async function getImage() {\n    // query.equalTo(\"userId\", props.user.id); //only for own's\n    query.equalTo(\"img\", props.nftSelected.name);\n    const results = await query.find(); // console.log(results);\n\n    getImgLikeds(results[0]);\n    return results[0];\n  } // async function getLikeds(){\n  //   const data = await props.user.get('likes');\n  //   console.log(data);\n  // }\n\n\n  async function getImgLikeds(userImg) {\n    const data = await userImg.get('likes');\n    setLikes(data);\n  }\n\n  async function likeImage() {\n    const userImg = await getImage();\n    const userImgLikes = await userImg.get(\"likes\");\n    const relation = props.user.relation('likes'); // If liked, change to unlike.\n    //relation.remove(userImg);\n\n    relation.add(userImg);\n    userImg.set(\"likes\", userImgLikes + 1);\n    props.user.save();\n    userImg.save().then(alert(\"liked it!\"));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        background: \"#282c34\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n        variant: \"top\",\n        src: props.nftSelected.url,\n        style: {\n          height: \"450\",\n          width: \"300\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: [\"name: \", props.nftSelected.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [\"likes: \", likes, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 27\n          }, this), \"Other data in DB\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => {\n            likeImage();\n            console.log('like it!');\n          },\n          children: \"Like\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          onClick: () => {\n            console.log('Leave a comment!');\n          },\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: async () => {\n            //confirm before destroy\n            let imageToDestroy = await getImage();\n            imageToDestroy.destroy();\n            alert(\"Image has been deleted\");\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CharacterSheet, \"uhIhGHNj6XwFuvIZMtvD47bkyxw=\");\n\n_c = CharacterSheet;\nexport default CharacterSheet;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharacterSheet\");","map":{"version":3,"sources":["/Users/CalvinCutlass/Desktop/Coding/coding_2020/Ivan Academy/Moralis/baler/src/components/characterSheet.js"],"names":["React","useState","useEffect","useCallback","Card","Button","Moralis","require","CharacterSheet","props","likes","setLikes","query","Query","imageData","imgData","getImage","nftSelected","equalTo","name","results","find","getImgLikeds","userImg","data","get","likeImage","userImgLikes","relation","user","add","set","save","then","alert","background","url","height","width","console","log","imageToDestroy","destroy"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback} from \"react\";\n\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button';\n\nconst Moralis = require('moralis');\n\nconst CharacterSheet = (props) => {\n    // const [object, setObject] = useState(null);\n    const [likes, setLikes] = useState(0);\n    let query = new Moralis.Query(\"UserImage\");\n\n    const imageData = useCallback(async () => {\n      const imgData = await getImage();\n      // const likes = await getImgLikeds(imgData);\n      // setLikes(likes);\n    }, []);\n\n    useEffect(() => {\n      if (props.nftSelected) {\n        imageData();\n        // setLikes(likes);\n      }\n    }, [imageData]);\n\n\n\n\n    async function getImage(){\n      // query.equalTo(\"userId\", props.user.id); //only for own's\n      query.equalTo(\"img\", props.nftSelected.name);\n      const results = await query.find();\n      // console.log(results);\n      getImgLikeds(results[0]);\n      return results[0];\n    }\n\n    // async function getLikeds(){\n    //   const data = await props.user.get('likes');\n    //   console.log(data);\n    // }\n\n    async function getImgLikeds(userImg){\n      const data = await userImg.get('likes');\n      setLikes(data);\n    }\n\n\n\n    async function likeImage(){\n      const userImg = await getImage();\n      const userImgLikes = await userImg.get(\"likes\");\n      const relation = props.user.relation('likes')\n      // If liked, change to unlike.\n      //relation.remove(userImg);\n      relation.add(userImg);\n      userImg.set(\"likes\", userImgLikes + 1);\n      props.user.save();\n      userImg.save().then(alert(\"liked it!\"));\n    }\n\n\n    return (\n      <div className='center'>\n      <Card style={{  background: \"#282c34\"}}>\n        <Card.Img variant=\"top\" src={props.nftSelected.url} style={{height:\"450\", width:\"300\"}} />\n        <Card.Body>\n          <Card.Title>name: {props.nftSelected.name}</Card.Title>\n          <Card.Text>\n            likes: {likes}<br />\n            Other data in DB\n          </Card.Text>\n          <Button variant=\"primary\" onClick={()=>{\n            likeImage();\n            console.log('like it!');}\n          }>Like</Button>\n          <Button variant=\"success\" onClick={()=>{\n            console.log('Leave a comment!');}\n          }>Comment</Button>\n          <Button variant=\"danger\" onClick={async()=>{\n//confirm before destroy\n            let imageToDestroy = await getImage();\n            imageToDestroy.destroy();\n            alert(\"Image has been deleted\");\n          }\n          }>Delete</Button>\n        </Card.Body>\n      </Card>\n      </div>\n)\n}\nexport default CharacterSheet;\n"]},"metadata":{},"sourceType":"module"}