{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Contains all Moralis API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nvar Moralis = {\n  authenticate: function () {\n    return Moralis.Web3.authenticate();\n  },\n\n  /**\n   * Call this method first to set up your authentication tokens for Moralis.\n   *\n   * @param {string} applicationId Your Moralis Application ID.\n   * @param {string} [javaScriptKey] Your Moralis JavaScript Key (Not needed for moralis-server)\n   * @param {string} [masterKey] Your Moralis Master Key. (Node.js only!)\n   * @static\n   */\n  initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    if (\"browser\" === 'browser' && _CoreManager.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {\n      /* eslint-disable no-console */\n      console.log(\"It looks like you're using the browser version of the SDK in a \" + \"node.js environment. You should require('parse/node') instead.\");\n      /* eslint-enable no-console */\n    }\n\n    Moralis._initialize(applicationId, javaScriptKey);\n  },\n  _initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  },\n\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  },\n\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Moralis.setAsyncStorage Moralis.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n  setLocalDatastoreController: function (controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  },\n\n  /**\n   * @member {string} Moralis.applicationId\n   * @static\n   */\n  set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  },\n\n  get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  },\n\n  /**\n   * @member {string} Moralis.javaScriptKey\n   * @static\n   */\n  set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  },\n\n  get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  },\n\n  /**\n   * @member {string} Moralis.masterKey\n   * @static\n   */\n  set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  },\n\n  get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  },\n\n  /**\n   * @member {string} Moralis.serverURL\n   * @static\n   */\n  set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  },\n\n  get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  },\n\n  /**\n   * @member {string} Moralis.serverAuthToken\n   * @static\n   */\n  set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  },\n\n  get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  },\n\n  /**\n   * @member {string} Moralis.serverAuthType\n   * @static\n   */\n  set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  },\n\n  get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  },\n\n  /**\n   * @member {string} Moralis.liveQueryServerURL\n   * @static\n   */\n  set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  },\n\n  get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  },\n\n  /**\n   * @member {string} Moralis.encryptedUser\n   * @static\n   */\n  set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  },\n\n  get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  },\n\n  /**\n   * @member {string} Moralis.secret\n   * @static\n   */\n  set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  },\n\n  get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  },\n\n  /**\n   * @member {boolean} Moralis.idempotency\n   * @static\n   */\n  set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  },\n\n  get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  }\n\n};\nMoralis.ACL = require('./ParseACL').default;\nMoralis.Analytics = require('./Analytics');\nMoralis.AnonymousUtils = require('./AnonymousUtils').default;\nMoralis.Cloud = require('./Cloud');\nMoralis.CLP = require('./ParseCLP').default;\nMoralis.CoreManager = require('./CoreManager');\nMoralis.Config = require('./ParseConfig').default;\nMoralis.Error = require('./ParseError').default;\nMoralis.FacebookUtils = require('./FacebookUtils').default;\nMoralis.File = require('./ParseFile').default;\nMoralis.GeoPoint = require('./ParseGeoPoint').default;\nMoralis.Polygon = require('./ParsePolygon').default;\nMoralis.Installation = require('./ParseInstallation').default;\nMoralis.LocalDatastore = require('./LocalDatastore');\nMoralis.Object = require('./ParseObject').default;\nMoralis.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nMoralis.Push = require('./Push');\nMoralis.Query = require('./ParseQuery').default;\nMoralis.Relation = require('./ParseRelation').default;\nMoralis.Role = require('./ParseRole').default;\nMoralis.Schema = require('./ParseSchema').default;\nMoralis.Session = require('./ParseSession').default;\nMoralis.Storage = require('./Storage');\nMoralis.User = require('./ParseUser').default;\nMoralis.LiveQuery = require('./ParseLiveQuery').default;\nMoralis.LiveQueryClient = require('./LiveQueryClient').default;\nMoralis.Web3 = require('./MoralisWeb3').default;\nMoralis.UI = require('./MoralisUI').default;\n\nMoralis._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nMoralis._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nMoralis._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nMoralis._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nMoralis._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nMoralis.enableLocalDatastore = function () {\n  Moralis.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isLocalDatastoreEnabled = function () {\n  return Moralis.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Moralis.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nMoralis.dumpLocalDatastore = function () {\n  if (!Moralis.LocalDatastore.isEnabled) {\n    console.log('Moralis.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return _promise.default.resolve({});\n  } else {\n    return Moralis.LocalDatastore._getAllContents();\n  }\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nMoralis.enableEncryptedUser = function () {\n  Moralis.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isEncryptedUserEnabled = function () {\n  return Moralis.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default); // For legacy requires, of the form `var Moralis = require('moralis').Moralis`\n\n\nMoralis.Moralis = Moralis;\nmodule.exports = Moralis;","map":{"version":3,"sources":["/Users/orbiter/Documents/code/baler/node_modules/moralis/lib/browser/Parse.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","_promise","_decode","_encode","_CoreManager","_CryptoController","_InstallationController","ParseOp","_RESTController","Moralis","authenticate","Web3","initialize","applicationId","javaScriptKey","default","get","process","env","SERVER_RENDERING","console","log","_initialize","masterKey","set","setAsyncStorage","storage","setLocalDatastoreController","controller","value","serverURL","serverAuthToken","serverAuthType","liveQueryServerURL","encryptedUser","secret","idempotency","ACL","Analytics","AnonymousUtils","Cloud","CLP","CoreManager","Config","Error","FacebookUtils","File","GeoPoint","Polygon","Installation","LocalDatastore","Object","Op","Set","SetOp","Unset","UnsetOp","Increment","IncrementOp","Add","AddOp","Remove","RemoveOp","AddUnique","AddUniqueOp","Relation","RelationOp","Push","Query","Role","Schema","Session","Storage","User","LiveQuery","LiveQueryClient","UI","_request","_len","arguments","length","args","Array","_key","getRESTController","request","apply","_ajax","_len2","_key2","ajax","_","disallowObjects","_getInstallationId","getInstallationController","currentInstallationId","enableLocalDatastore","isEnabled","isLocalDatastoreEnabled","dumpLocalDatastore","resolve","_getAllContents","enableEncryptedUser","isEncryptedUserEnabled","setCryptoController","setInstallationController","setRESTController","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Contains all Moralis API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nvar Moralis = {\n  authenticate: function () {\n    return Moralis.Web3.authenticate();\n  },\n\n  /**\n   * Call this method first to set up your authentication tokens for Moralis.\n   *\n   * @param {string} applicationId Your Moralis Application ID.\n   * @param {string} [javaScriptKey] Your Moralis JavaScript Key (Not needed for moralis-server)\n   * @param {string} [masterKey] Your Moralis Master Key. (Node.js only!)\n   * @static\n   */\n  initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    if (\"browser\" === 'browser' && _CoreManager.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {\n      /* eslint-disable no-console */\n      console.log(\"It looks like you're using the browser version of the SDK in a \" + \"node.js environment. You should require('parse/node') instead.\");\n      /* eslint-enable no-console */\n    }\n\n    Moralis._initialize(applicationId, javaScriptKey);\n  },\n  _initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  },\n\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  },\n\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Moralis.setAsyncStorage Moralis.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n  setLocalDatastoreController: function (controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  },\n\n  /**\n   * @member {string} Moralis.applicationId\n   * @static\n   */\n  set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  },\n\n  get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  },\n\n  /**\n   * @member {string} Moralis.javaScriptKey\n   * @static\n   */\n  set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  },\n\n  get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  },\n\n  /**\n   * @member {string} Moralis.masterKey\n   * @static\n   */\n  set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  },\n\n  get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  },\n\n  /**\n   * @member {string} Moralis.serverURL\n   * @static\n   */\n  set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  },\n\n  get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  },\n\n  /**\n   * @member {string} Moralis.serverAuthToken\n   * @static\n   */\n  set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  },\n\n  get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  },\n\n  /**\n   * @member {string} Moralis.serverAuthType\n   * @static\n   */\n  set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  },\n\n  get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  },\n\n  /**\n   * @member {string} Moralis.liveQueryServerURL\n   * @static\n   */\n  set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  },\n\n  get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  },\n\n  /**\n   * @member {string} Moralis.encryptedUser\n   * @static\n   */\n  set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  },\n\n  get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  },\n\n  /**\n   * @member {string} Moralis.secret\n   * @static\n   */\n  set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  },\n\n  get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  },\n\n  /**\n   * @member {boolean} Moralis.idempotency\n   * @static\n   */\n  set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  },\n\n  get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  }\n\n};\nMoralis.ACL = require('./ParseACL').default;\nMoralis.Analytics = require('./Analytics');\nMoralis.AnonymousUtils = require('./AnonymousUtils').default;\nMoralis.Cloud = require('./Cloud');\nMoralis.CLP = require('./ParseCLP').default;\nMoralis.CoreManager = require('./CoreManager');\nMoralis.Config = require('./ParseConfig').default;\nMoralis.Error = require('./ParseError').default;\nMoralis.FacebookUtils = require('./FacebookUtils').default;\nMoralis.File = require('./ParseFile').default;\nMoralis.GeoPoint = require('./ParseGeoPoint').default;\nMoralis.Polygon = require('./ParsePolygon').default;\nMoralis.Installation = require('./ParseInstallation').default;\nMoralis.LocalDatastore = require('./LocalDatastore');\nMoralis.Object = require('./ParseObject').default;\nMoralis.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nMoralis.Push = require('./Push');\nMoralis.Query = require('./ParseQuery').default;\nMoralis.Relation = require('./ParseRelation').default;\nMoralis.Role = require('./ParseRole').default;\nMoralis.Schema = require('./ParseSchema').default;\nMoralis.Session = require('./ParseSession').default;\nMoralis.Storage = require('./Storage');\nMoralis.User = require('./ParseUser').default;\nMoralis.LiveQuery = require('./ParseLiveQuery').default;\nMoralis.LiveQueryClient = require('./LiveQueryClient').default;\nMoralis.Web3 = require('./MoralisWeb3').default;\nMoralis.UI = require('./MoralisUI').default;\n\nMoralis._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nMoralis._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nMoralis._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nMoralis._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nMoralis._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nMoralis.enableLocalDatastore = function () {\n  Moralis.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isLocalDatastoreEnabled = function () {\n  return Moralis.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Moralis.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nMoralis.dumpLocalDatastore = function () {\n  if (!Moralis.LocalDatastore.isEnabled) {\n    console.log('Moralis.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return _promise.default.resolve({});\n  } else {\n    return Moralis.LocalDatastore._getAllContents();\n  }\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nMoralis.enableEncryptedUser = function () {\n  Moralis.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isEncryptedUserEnabled = function () {\n  return Moralis.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default);\n\n// For legacy requires, of the form `var Moralis = require('moralis').Moralis`\nMoralis.Moralis = Moralis;\nmodule.exports = Moralis;"]},"metadata":{},"sourceType":"script"}