{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.send = send;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Contains functions to deal with Push in Parse.\r\n *\r\n * @class Parse.Push\r\n * @static\r\n * @hideconstructor\r\n */\n\n/**\r\n * Sends a push notification.\r\n * **Available in Cloud Code only.**\r\n *\r\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\r\n *\r\n * @function send\r\n * @name Parse.Push.send\r\n * @param {object} data -  The data of the push notification.  Valid fields\r\n * are:\r\n *   <ol>\r\n *     <li>channels - An Array of channels to push to.</li>\r\n *     <li>push_time - A Date object for when to send the push.</li>\r\n *     <li>expiration_time -  A Date object for when to expire\r\n *         the push.</li>\r\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\r\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\r\n *         a set of installations to push to.</li>\r\n *     <li>data - The data to send as part of the push.</li>\r\n *   <ol>\r\n * @returns {Promise} A promise that is fulfilled when the push request\r\n *     completes.\r\n */\n\n\nfunction send(data\n/*: PushData*/\n)\n/*: Promise*/\n{\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  return _CoreManager.default.getPushController().send(data);\n}\n\nvar DefaultController = {\n  send: function (data\n  /*: PushData*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, {\n      useMasterKey: true\n    });\n  }\n};\n\n_CoreManager.default.setPushController(DefaultController);","map":{"version":3,"sources":["D:/8 Github/baler/node_modules/moralis/lib/browser/Push.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","send","_typeof2","_CoreManager","_ParseQuery","data","where","default","toJSON","push_time","expiration_time","expiration_interval","Error","getPushController","DefaultController","getRESTController","request","useMasterKey","setPushController"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,sDAAD,CAApC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8DAAD,CAApC;;AAEAC,sBAAsB,CAACC,OAAD,EAAU,YAAV,EAAwB;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAAxB,CAAtB;;AAIAD,OAAO,CAACE,IAAR,GAAeA,IAAf;;AAEA,IAAIC,QAAQ,GAAGN,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAArC;;AAEA,IAAIM,YAAY,GAAGP,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIO,WAAW,GAAGR,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASI,IAAT,CAAcI;AACd;AADA;AAGA;AACA;AACE,MAAIA,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACC,KAAL,YAAsBF,WAAW,CAACG,OAApD,EAA6D;AAC3DF,IAAAA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACC,KAAL,CAAWE,MAAX,GAAoBF,KAAjC;AACD;;AAED,MAAID,IAAI,CAACI,SAAL,IAAkB,CAAC,GAAGP,QAAQ,CAACK,OAAb,EAAsBF,IAAI,CAACI,SAA3B,MAA0C,QAAhE,EAA0E;AACxEJ,IAAAA,IAAI,CAACI,SAAL,GAAiBJ,IAAI,CAACI,SAAL,CAAeD,MAAf,EAAjB;AACD;;AAED,MAAIH,IAAI,CAACK,eAAL,IAAwB,CAAC,GAAGR,QAAQ,CAACK,OAAb,EAAsBF,IAAI,CAACK,eAA3B,MAAgD,QAA5E,EAAsF;AACpFL,IAAAA,IAAI,CAACK,eAAL,GAAuBL,IAAI,CAACK,eAAL,CAAqBF,MAArB,EAAvB;AACD;;AAED,MAAIH,IAAI,CAACK,eAAL,IAAwBL,IAAI,CAACM,mBAAjC,EAAsD;AACpD,UAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,SAAOT,YAAY,CAACI,OAAb,CAAqBM,iBAArB,GAAyCZ,IAAzC,CAA8CI,IAA9C,CAAP;AACD;;AAED,IAAIS,iBAAiB,GAAG;AACtBb,EAAAA,IAAI,EAAE,UAAUI;AAChB;AADM,IAEJ;AACA,WAAOF,YAAY,CAACI,OAAb,CAAqBQ,iBAArB,GAAyCC,OAAzC,CAAiD,MAAjD,EAAyD,MAAzD,EAAiEX,IAAjE,EAAuE;AAC5EY,MAAAA,YAAY,EAAE;AAD8D,KAAvE,CAAP;AAGD;AAPqB,CAAxB;;AAUAd,YAAY,CAACI,OAAb,CAAqBW,iBAArB,CAAuCJ,iBAAvC","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.send = send;\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Contains functions to deal with Push in Parse.\r\n *\r\n * @class Parse.Push\r\n * @static\r\n * @hideconstructor\r\n */\r\n\r\n/**\r\n * Sends a push notification.\r\n * **Available in Cloud Code only.**\r\n *\r\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\r\n *\r\n * @function send\r\n * @name Parse.Push.send\r\n * @param {object} data -  The data of the push notification.  Valid fields\r\n * are:\r\n *   <ol>\r\n *     <li>channels - An Array of channels to push to.</li>\r\n *     <li>push_time - A Date object for when to send the push.</li>\r\n *     <li>expiration_time -  A Date object for when to expire\r\n *         the push.</li>\r\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\r\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\r\n *         a set of installations to push to.</li>\r\n *     <li>data - The data to send as part of the push.</li>\r\n *   <ol>\r\n * @returns {Promise} A promise that is fulfilled when the push request\r\n *     completes.\r\n */\r\n\r\n\r\nfunction send(data\r\n/*: PushData*/\r\n)\r\n/*: Promise*/\r\n{\r\n  if (data.where && data.where instanceof _ParseQuery.default) {\r\n    data.where = data.where.toJSON().where;\r\n  }\r\n\r\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\r\n    data.push_time = data.push_time.toJSON();\r\n  }\r\n\r\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\r\n    data.expiration_time = data.expiration_time.toJSON();\r\n  }\r\n\r\n  if (data.expiration_time && data.expiration_interval) {\r\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\r\n  }\r\n\r\n  return _CoreManager.default.getPushController().send(data);\r\n}\r\n\r\nvar DefaultController = {\r\n  send: function (data\r\n  /*: PushData*/\r\n  ) {\r\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, {\r\n      useMasterKey: true\r\n    });\r\n  }\r\n};\r\n\r\n_CoreManager.default.setPushController(DefaultController);"]},"metadata":{},"sourceType":"script"}