{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Parse.Config is a local representation of configuration data that\r\n * can be set from the Parse dashboard.\r\n *\r\n * @alias Parse.Config\r\n */\n\n\nvar ParseConfig = /*#__PURE__*/function () {\n  function ParseConfig() {\n    (0, _classCallCheck2.default)(this, ParseConfig);\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\n    (0, _defineProperty2.default)(this, \"_escapedAttributes\", void 0);\n    this.attributes = {};\n    this._escapedAttributes = {};\n  }\n  /**\r\n   * Gets the value of an attribute.\r\n   *\r\n   * @param {string} attr The name of an attribute.\r\n   * @returns {*}\r\n   */\n\n\n  (0, _createClass2.default)(ParseConfig, [{\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: any*/\n    {\n      return this.attributes[attr];\n    }\n    /**\r\n     * Gets the HTML-escaped value of an attribute.\r\n     *\r\n     * @param {string} attr The name of an attribute.\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var html = this._escapedAttributes[attr];\n\n      if (html) {\n        return html;\n      }\n\n      var val = this.attributes[attr];\n      var escaped = '';\n\n      if (val != null) {\n        escaped = (0, _escape2.default)(val.toString());\n      }\n\n      this._escapedAttributes[attr] = escaped;\n      return escaped;\n    }\n    /**\r\n     * Retrieves the most recently-fetched configuration object, either from\r\n     * memory or from local storage if necessary.\r\n     *\r\n     * @static\r\n     * @returns {Parse.Config} The most recently-fetched Parse.Config if it\r\n     *     exists, else an empty Parse.Config.\r\n     */\n\n  }], [{\n    key: \"current\",\n    value: function () {\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.current();\n    }\n    /**\r\n     * Gets a new configuration object from the server.\r\n     *\r\n     * @static\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object when the get completes.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.get(options);\n    }\n    /**\r\n     * Save value keys to the server.\r\n     *\r\n     * @static\r\n     * @param {object} attrs The config parameters and values.\r\n     * @param {object} masterKeyOnlyFlags The flags that define whether config parameters listed\r\n     * in `attrs` should be retrievable only by using the master key.\r\n     * For example: `param1: true` makes `param1` only retrievable by using the master key.\r\n     * If a parameter is not provided or set to `false`, it can be retrieved without\r\n     * using the master key.\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object or with the current with the update.\r\n     */\n\n  }, {\n    key: \"save\",\n    value: function (attrs\n    /*: { [key: string]: any }*/\n    , masterKeyOnlyFlags\n    /*: { [key: string]: any }*/\n    ) {\n      var controller = _CoreManager.default.getConfigController(); //To avoid a mismatch with the local and the cloud config we get a new version\n\n\n      return controller.save(attrs, masterKeyOnlyFlags).then(function () {\n        return controller.get({\n          useMasterKey: true\n        });\n      }, function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n    /**\r\n     * Used for testing\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentConfig = null;\n    }\n  }]);\n  return ParseConfig;\n}();\n\nvar currentConfig = null;\nvar CURRENT_CONFIG_KEY = 'currentConfig';\n\nfunction decodePayload(data) {\n  try {\n    var json = JSON.parse(data);\n\n    if (json && (0, _typeof2.default)(json) === 'object') {\n      return (0, _decode.default)(json);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nvar DefaultController = {\n  current: function () {\n    if (currentConfig) {\n      return currentConfig;\n    }\n\n    var config = new ParseConfig();\n\n    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);\n\n    if (!_Storage.default.async()) {\n      var configData = _Storage.default.getItem(storagePath);\n\n      if (configData) {\n        var attributes = decodePayload(configData);\n\n        if (attributes) {\n          config.attributes = attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    } // Return a promise for async storage controllers\n\n\n    return _Storage.default.getItemAsync(storagePath).then(function (configData) {\n      if (configData) {\n        var _attributes = decodePayload(configData);\n\n        if (_attributes) {\n          config.attributes = _attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    });\n  },\n  get: function () {\n    var options\n    /*: RequestOptions*/\n    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'config', {}, options).then(function (response) {\n      if (!response || !response.params) {\n        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');\n        return _promise.default.reject(error);\n      }\n\n      var config = new ParseConfig();\n      config.attributes = {};\n\n      for (var attr in response.params) {\n        config.attributes[attr] = (0, _decode.default)(response.params[attr]);\n      }\n\n      currentConfig = config;\n      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function () {\n        return config;\n      });\n    });\n  },\n  save: function (attrs\n  /*: { [key: string]: any }*/\n  , masterKeyOnlyFlags\n  /*: { [key: string]: any }*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var encodedAttrs = {};\n\n    for (var _key in attrs) {\n      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);\n    }\n\n    return RESTController.request('PUT', 'config', {\n      params: encodedAttrs,\n      masterKeyOnly: masterKeyOnlyFlags\n    }, {\n      useMasterKey: true\n    }).then(function (response) {\n      if (response && response.result) {\n        return _promise.default.resolve();\n      } else {\n        var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');\n        return _promise.default.reject(error);\n      }\n    });\n  }\n};\n\n_CoreManager.default.setConfigController(DefaultController);\n\nvar _default = ParseConfig;\nexports.default = _default;","map":{"version":3,"sources":["D:/8 Github/baler/node_modules/moralis/lib/browser/ParseConfig.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_stringify","_typeof2","_promise","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","_decode","_encode","_escape2","_ParseError","_Storage","ParseConfig","attributes","_escapedAttributes","key","attr","html","val","escaped","toString","controller","getConfigController","current","options","arguments","length","undefined","get","attrs","masterKeyOnlyFlags","save","then","useMasterKey","error","reject","currentConfig","CURRENT_CONFIG_KEY","decodePayload","data","json","JSON","parse","e","DefaultController","config","storagePath","generatePath","async","configData","getItem","getItemAsync","_attributes","RESTController","getRESTController","request","response","params","INVALID_JSON","setItemAsync","encodedAttrs","_key","masterKeyOnly","result","resolve","INTERNAL_SERVER_ERROR","setConfigController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _decode = _interopRequireDefault(require(\"./decode\"));\r\n\r\nvar _encode = _interopRequireDefault(require(\"./encode\"));\r\n\r\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\r\n\r\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\r\n\r\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Parse.Config is a local representation of configuration data that\r\n * can be set from the Parse dashboard.\r\n *\r\n * @alias Parse.Config\r\n */\r\n\r\n\r\nvar ParseConfig = /*#__PURE__*/function () {\r\n  function ParseConfig() {\r\n    (0, _classCallCheck2.default)(this, ParseConfig);\r\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_escapedAttributes\", void 0);\r\n    this.attributes = {};\r\n    this._escapedAttributes = {};\r\n  }\r\n  /**\r\n   * Gets the value of an attribute.\r\n   *\r\n   * @param {string} attr The name of an attribute.\r\n   * @returns {*}\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseConfig, [{\r\n    key: \"get\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: any*/\r\n    {\r\n      return this.attributes[attr];\r\n    }\r\n    /**\r\n     * Gets the HTML-escaped value of an attribute.\r\n     *\r\n     * @param {string} attr The name of an attribute.\r\n     * @returns {string}\r\n     */\r\n\r\n  }, {\r\n    key: \"escape\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: string*/\r\n    {\r\n      var html = this._escapedAttributes[attr];\r\n\r\n      if (html) {\r\n        return html;\r\n      }\r\n\r\n      var val = this.attributes[attr];\r\n      var escaped = '';\r\n\r\n      if (val != null) {\r\n        escaped = (0, _escape2.default)(val.toString());\r\n      }\r\n\r\n      this._escapedAttributes[attr] = escaped;\r\n      return escaped;\r\n    }\r\n    /**\r\n     * Retrieves the most recently-fetched configuration object, either from\r\n     * memory or from local storage if necessary.\r\n     *\r\n     * @static\r\n     * @returns {Parse.Config} The most recently-fetched Parse.Config if it\r\n     *     exists, else an empty Parse.Config.\r\n     */\r\n\r\n  }], [{\r\n    key: \"current\",\r\n    value: function () {\r\n      var controller = _CoreManager.default.getConfigController();\r\n\r\n      return controller.current();\r\n    }\r\n    /**\r\n     * Gets a new configuration object from the server.\r\n     *\r\n     * @static\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object when the get completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"get\",\r\n    value: function () {\r\n      var options\r\n      /*: RequestOptions*/\r\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n      var controller = _CoreManager.default.getConfigController();\r\n\r\n      return controller.get(options);\r\n    }\r\n    /**\r\n     * Save value keys to the server.\r\n     *\r\n     * @static\r\n     * @param {object} attrs The config parameters and values.\r\n     * @param {object} masterKeyOnlyFlags The flags that define whether config parameters listed\r\n     * in `attrs` should be retrievable only by using the master key.\r\n     * For example: `param1: true` makes `param1` only retrievable by using the master key.\r\n     * If a parameter is not provided or set to `false`, it can be retrieved without\r\n     * using the master key.\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object or with the current with the update.\r\n     */\r\n\r\n  }, {\r\n    key: \"save\",\r\n    value: function (attrs\r\n    /*: { [key: string]: any }*/\r\n    , masterKeyOnlyFlags\r\n    /*: { [key: string]: any }*/\r\n    ) {\r\n      var controller = _CoreManager.default.getConfigController(); //To avoid a mismatch with the local and the cloud config we get a new version\r\n\r\n\r\n      return controller.save(attrs, masterKeyOnlyFlags).then(function () {\r\n        return controller.get({\r\n          useMasterKey: true\r\n        });\r\n      }, function (error) {\r\n        return _promise.default.reject(error);\r\n      });\r\n    }\r\n    /**\r\n     * Used for testing\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"_clearCache\",\r\n    value: function () {\r\n      currentConfig = null;\r\n    }\r\n  }]);\r\n  return ParseConfig;\r\n}();\r\n\r\nvar currentConfig = null;\r\nvar CURRENT_CONFIG_KEY = 'currentConfig';\r\n\r\nfunction decodePayload(data) {\r\n  try {\r\n    var json = JSON.parse(data);\r\n\r\n    if (json && (0, _typeof2.default)(json) === 'object') {\r\n      return (0, _decode.default)(json);\r\n    }\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nvar DefaultController = {\r\n  current: function () {\r\n    if (currentConfig) {\r\n      return currentConfig;\r\n    }\r\n\r\n    var config = new ParseConfig();\r\n\r\n    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);\r\n\r\n    if (!_Storage.default.async()) {\r\n      var configData = _Storage.default.getItem(storagePath);\r\n\r\n      if (configData) {\r\n        var attributes = decodePayload(configData);\r\n\r\n        if (attributes) {\r\n          config.attributes = attributes;\r\n          currentConfig = config;\r\n        }\r\n      }\r\n\r\n      return config;\r\n    } // Return a promise for async storage controllers\r\n\r\n\r\n    return _Storage.default.getItemAsync(storagePath).then(function (configData) {\r\n      if (configData) {\r\n        var _attributes = decodePayload(configData);\r\n\r\n        if (_attributes) {\r\n          config.attributes = _attributes;\r\n          currentConfig = config;\r\n        }\r\n      }\r\n\r\n      return config;\r\n    });\r\n  },\r\n  get: function () {\r\n    var options\r\n    /*: RequestOptions*/\r\n    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    return RESTController.request('GET', 'config', {}, options).then(function (response) {\r\n      if (!response || !response.params) {\r\n        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');\r\n        return _promise.default.reject(error);\r\n      }\r\n\r\n      var config = new ParseConfig();\r\n      config.attributes = {};\r\n\r\n      for (var attr in response.params) {\r\n        config.attributes[attr] = (0, _decode.default)(response.params[attr]);\r\n      }\r\n\r\n      currentConfig = config;\r\n      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function () {\r\n        return config;\r\n      });\r\n    });\r\n  },\r\n  save: function (attrs\r\n  /*: { [key: string]: any }*/\r\n  , masterKeyOnlyFlags\r\n  /*: { [key: string]: any }*/\r\n  ) {\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    var encodedAttrs = {};\r\n\r\n    for (var _key in attrs) {\r\n      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);\r\n    }\r\n\r\n    return RESTController.request('PUT', 'config', {\r\n      params: encodedAttrs,\r\n      masterKeyOnly: masterKeyOnlyFlags\r\n    }, {\r\n      useMasterKey: true\r\n    }).then(function (response) {\r\n      if (response && response.result) {\r\n        return _promise.default.resolve();\r\n      } else {\r\n        var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');\r\n        return _promise.default.reject(error);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n_CoreManager.default.setConfigController(DefaultController);\r\n\r\nvar _default = ParseConfig;\r\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}