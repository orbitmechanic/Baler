"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.EthereumEvents = void 0;

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _construct2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/construct"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _web = _interopRequireDefault(require("web3"));

var _ParseObject = _interopRequireDefault(require("./ParseObject"));

var _ParseQuery = _interopRequireDefault(require("./ParseQuery"));

var _ParseUser = _interopRequireDefault(require("./ParseUser"));

var _ParseACL = _interopRequireDefault(require("./ParseACL"));

var _context7, _context8, _context9, _context10;

var EthereumEvents = {
  CONNECT: 'connect',
  DISCONNECT: 'disconnect',
  ACCOUNTS_CHANGED: 'accountsChanged',
  CHAIN_CHANGED: 'chainChanged'
};
exports.EthereumEvents = EthereumEvents;
var WARNING = 'Non ethereum enabled browser';

function uniq(arr) {
  return (0, _filter.default)(arr).call(arr, function (v, i) {
    return (0, _indexOf.default)(arr).call(arr, v) === i;
  });
}

var MoralisWeb3 = /*#__PURE__*/function () {
  function MoralisWeb3() {
    (0, _classCallCheck2.default)(this, MoralisWeb3);
    var MWeb3 = typeof _web.default === 'function' ? _web.default : window.Web3;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _construct2.default)(MWeb3, args);
  }

  (0, _createClass2.default)(MoralisWeb3, null, [{
    key: "enable",
    value: function () {
      var _enable = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _window$web;

        var MWeb3, provider, ethereum, web3;
        return _regenerator.default.wrap(function (_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                MWeb3 = typeof _web.default === 'function' ? _web.default : window.Web3;
                provider = (_window$web = window.web3) === null || _window$web === void 0 ? void 0 : _window$web.currentProvider;
                ethereum = window.ethereum;

                if (!(provider !== null && provider !== void 0 && provider.isTrust)) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", new MWeb3(provider));

              case 5:
                if (!ethereum) {
                  _context.next = 10;
                  break;
                }

                web3 = new MWeb3(ethereum);
                _context.next = 9;
                return ethereum.enable();

              case 9:
                return _context.abrupt("return", web3);

              case 10:
                if (!provider) {
                  _context.next = 12;
                  break;
                }

                return _context.abrupt("return", new MWeb3(provider));

              case 12:
                throw new Error(WARNING);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function () {
        return _enable.apply(this, arguments);
      };
    }()
  }, {
    key: "authenticate",
    value: function () {
      var _authenticate = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _context2, _user$get;

        var isLoggedIn, web3, data, accounts, accountsLower, _accountsLower, ethAddress, signature, authData, user;

        return _regenerator.default.wrap(function (_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _ParseUser.default.current();

              case 2:
                isLoggedIn = _context3.sent;

                if (!isLoggedIn) {
                  _context3.next = 6;
                  break;
                }

                _context3.next = 6;
                return _ParseUser.default.logOut();

              case 6:
                _context3.next = 8;
                return MoralisWeb3.enable();

              case 8:
                web3 = _context3.sent;
                data = MoralisWeb3.getSigningData();
                _context3.next = 12;
                return web3.eth.getAccounts();

              case 12:
                accounts = _context3.sent;
                accountsLower = (0, _map.default)(accounts).call(accounts, function (v) {
                  return v.toLowerCase();
                });
                _accountsLower = (0, _slicedToArray2.default)(accountsLower, 1), ethAddress = _accountsLower[0];

                if (ethAddress) {
                  _context3.next = 17;
                  break;
                }

                throw new Error('Address not found');

              case 17:
                _context3.next = 19;
                return web3.eth.personal.sign(data, ethAddress, '');

              case 19:
                signature = _context3.sent;

                if (signature) {
                  _context3.next = 22;
                  break;
                }

                throw new Error('Data not signed');

              case 22:
                authData = {
                  id: ethAddress,
                  signature: signature,
                  data: data
                };
                _context3.next = 25;
                return _ParseUser.default.logInWith('moralisEth', {
                  authData: authData
                });

              case 25:
                user = _context3.sent;
                _context3.next = 28;
                return user.setACL(new _ParseACL.default(user));

              case 28:
                if (user) {
                  _context3.next = 30;
                  break;
                }

                throw new Error('Could not get user');

              case 30:
                user.set('accounts', uniq((0, _concat.default)(_context2 = []).call(_context2, accountsLower, (_user$get = user.get('accounts')) !== null && _user$get !== void 0 ? _user$get : [])));
                user.set('ethAddress', ethAddress);
                _context3.next = 34;
                return user.save();

              case 34:
                return _context3.abrupt("return", user);

              case 35:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee2);
      }));

      return function () {
        return _authenticate.apply(this, arguments);
      };
    }()
  }, {
    key: "link",
    value: function () {
      var _link = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(account) {
        var _context4, _user$get2;

        var web3, data, user, ethAddress, EthAddress, query, ethAddressRecord, signature, authData;
        return _regenerator.default.wrap(function (_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return MoralisWeb3.enable();

              case 2:
                web3 = _context5.sent;
                data = MoralisWeb3.getSigningData();
                _context5.next = 6;
                return _ParseUser.default.current();

              case 6:
                user = _context5.sent;
                ethAddress = account.toLowerCase();
                EthAddress = _ParseObject.default.extend('_EthAddress');
                query = new _ParseQuery.default(EthAddress);
                _context5.next = 12;
                return query.get(ethAddress).catch(function () {
                  return null;
                });

              case 12:
                ethAddressRecord = _context5.sent;

                if (ethAddressRecord) {
                  _context5.next = 20;
                  break;
                }

                _context5.next = 16;
                return web3.eth.personal.sign(data, account, '');

              case 16:
                signature = _context5.sent;
                authData = {
                  id: ethAddress,
                  signature: signature,
                  data: data
                };
                _context5.next = 20;
                return user.linkWith('moralisEth', {
                  authData: authData
                });

              case 20:
                user.set('accounts', uniq((0, _concat.default)(_context4 = [ethAddress]).call(_context4, (_user$get2 = user.get('accounts')) !== null && _user$get2 !== void 0 ? _user$get2 : [])));
                user.set('ethAddress', ethAddress);
                _context5.next = 24;
                return user.save();

              case 24:
                return _context5.abrupt("return", user);

              case 25:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee3);
      }));

      return function () {
        return _link.apply(this, arguments);
      };
    }()
  }, {
    key: "unlink",
    value: function () {
      var _unlink = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(account) {
        var _user$get3;

        var accountsLower, EthAddress, query, ethAddressRecord, user, accounts, nextAccounts;
        return _regenerator.default.wrap(function (_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                accountsLower = account.toLowerCase();
                EthAddress = _ParseObject.default.extend('_EthAddress');
                query = new _ParseQuery.default(EthAddress);
                _context6.next = 5;
                return query.get(accountsLower);

              case 5:
                ethAddressRecord = _context6.sent;
                _context6.next = 8;
                return ethAddressRecord.destroy();

              case 8:
                _context6.next = 10;
                return _ParseUser.default.current();

              case 10:
                user = _context6.sent;
                accounts = (_user$get3 = user.get('accounts')) !== null && _user$get3 !== void 0 ? _user$get3 : [];
                nextAccounts = (0, _filter.default)(accounts).call(accounts, function (v) {
                  return v !== accountsLower;
                });
                user.set('accounts', nextAccounts);
                user.set('ethAddress', nextAccounts[0]);
                _context6.next = 17;
                return user._unlinkFrom('moralisEth');

              case 17:
                _context6.next = 19;
                return user.save();

              case 19:
                return _context6.abrupt("return", user);

              case 20:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee4);
      }));

      return function () {
        return _unlink.apply(this, arguments);
      };
    }()
  }, {
    key: "on",
    value: function (eventName, cb) {
      var ethereum = window.ethereum;

      if (!ethereum || !ethereum.on) {
        console.warn(WARNING);
        return function () {
          console.warn(WARNING);
        };
      }

      ethereum.on(eventName, cb);
      return function () {
        console.warn('UNSUB NOT SUPPORTED');
      };
    }
  }, {
    key: "getSigningData",
    value: function () {
      return "Moralis Authentication";
    }
  }]);
  return MoralisWeb3;
}();

MoralisWeb3.onConnect = (0, _bind.default)(_context7 = MoralisWeb3.on).call(_context7, MoralisWeb3, EthereumEvents.CONNECT);
MoralisWeb3.onDisconnect = (0, _bind.default)(_context8 = MoralisWeb3.on).call(_context8, MoralisWeb3, EthereumEvents.DISCONNECT);
MoralisWeb3.onChainChanged = (0, _bind.default)(_context9 = MoralisWeb3.on).call(_context9, MoralisWeb3, EthereumEvents.CHAIN_CHANGED);
MoralisWeb3.onAccountsChanged = (0, _bind.default)(_context10 = MoralisWeb3.on).call(_context10, MoralisWeb3, EthereumEvents.ACCOUNTS_CHANGED);
var _default = MoralisWeb3;
exports.default = _default;